<?xml version="1.0" encoding="UTF-8"?>
<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:aop= "http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd">
<!-- 配置扫描注解,不扫描@Controller注解 -->
<context:component-scan base-package="cn.toptest.oa.service"/>
<context:component-scan base-package="cn.toptest.oa.dao"/>
<!-- 注入 properties配置文件-->
<!-- <util:properties id="jdbc" location="classpath:resources/dbinfo.properties"/>
 --><!-- 配置数据源 -->
<!-- <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
<property name="driverClassName" value="#{jdbc.driver}"/>
<property name="url" value="#{jdbc.url}"/>
<property name="username" value="#{jdbc.user}"/>
<property name="password" value="#{jdbc.password}"/>
</bean> -->

<!-- 注入 properties配置文件-->
<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
    <property name="locations">  
        <list>  
            <value>classpath:resources/dbinfo.properties</value>  
            <!-- <value>classpath:resources/log4j.properties</value> -->
        </list>  
    </property>  
</bean>  
<!-- 配置数据源c3p0，连接池 -->  
<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">  
    <property name="driverClass">  
        <value>${driver}</value>  
    </property>  
    <property name="jdbcUrl">  
        <value>${url}</value>  
    </property>  
    <!--MySQL数据库的用户名 -->  
   <property name="user">  
       <value>${user}</value>  
   </property>  
   <!--MySQL数据库 密码 -->  
   <property name="password">  
       <value>${password}</value>  
   </property>  
   <!--连接池中保留的最小连接数。 -->  
   <property name="minPoolSize">  
       <value>5</value>  
   </property>  
   <!--连接池中保留的最大连接数。Default: 15 -->  
   <property name="maxPoolSize">  
       <value>30</value>  
   </property>  
   <!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->  
   <property name="initialPoolSize">  
       <value>10</value>  
   </property>  
   <!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->  
   <property name="maxIdleTime">  
       <value>60</value>  
   </property>  
   <!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->  
   <property name="acquireIncrement">  
       <value>5</value>  
   </property>  
   <!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的 statements属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面   
       的因素。如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0 -->  
   <property name="maxStatements">  
       <value>0</value>  
   </property>  
   <!--每60秒检查所有连接池中的空闲连接。Default: 0 -->  
   <property name="idleConnectionTestPeriod">  
       <value>60</value>  
   </property>  
   <!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->  
   <property name="acquireRetryAttempts">  
       <value>30</value>  
   </property>  
   <!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效 保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试   
       获取连接失败后该数据源将申明已断开并永久关闭。Default: false -->  
   <property name="breakAfterAcquireFailure">  
       <value>true</value>  
   </property>  
   <!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的 时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable   
       等方法来提升连接测试的性能。Default: false -->  
    <property name="testConnectionOnCheckout">  
        <value>false</value>  
    </property>  
</bean>

<!--创建SqlSessionFactory同时指定数据源-->
<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <property name="dataSource" ref="dataSource" />  
        <property name="configLocation" value="classpath:resources/Mybatis-conf.xml" />  
</bean> 
<!--创建数据映射器，数据映射器必须为接口-->
<bean id="userMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">    
       <property name="mapperInterface" value="cn.toptest.oa.mapper.UserMapper" />    
       <property name="sqlSessionFactory" ref="sqlSessionFactory" />    
</bean>
<bean id="roleMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">    
       <property name="mapperInterface" value="cn.toptest.oa.mapper.RoleMapper" />    
       <property name="sqlSessionFactory" ref="sqlSessionFactory" />    
</bean>    
<bean id="departmentMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">    
       <property name="mapperInterface" value="cn.toptest.oa.mapper.DepartmentMapper" />    
       <property name="sqlSessionFactory" ref="sqlSessionFactory" />    
</bean>
    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->  
<!--     <bean id="transactionManager"  
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="dataSource" />  
    </bean>   -->

	<!-- transaction manager, use DataSourceTransactionManager -->
<!-- 	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<aop:config>
		<aop:pointcut id="fooServiceMethods"
			expression="execution(* cn.toptest.*.service.*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="fooServiceMethods" />
	</aop:config>
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="find*" read-only="true" />
			<tx:method name="load*" read-only="true" />
			<tx:method name="*" rollback-for="Exception" />
		</tx:attributes>
	</tx:advice> -->
	<!-- 开启事务注解驱动 -->
    <tx:annotation-driven />
    <!-- 事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
  
    <!-- advice：通知 -->
    <tx:advice id="transactionAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="*" propagation="REQUIRED" isolation="DEFAULT" rollback-for="java.lang.Exception"/>
            <tx:method name="select*" read-only="true"/>
        </tx:attributes>
    </tx:advice>
  
    <!-- 切入 -->
    <aop:config>
      <aop:advisor advice-ref="transactionAdvice" pointcut="execution(* cn.toptest.service.*.*.*(..))"/>  
    </aop:config>

</beans>